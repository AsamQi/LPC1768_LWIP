; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\system_lpc17xx.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\system_lpc17xx.d --cpu=Cortex-M3 --apcs=interwork -O0 -I../../../CoreSupport -I../../../DeviceSupport/NXP/LPC17xx -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\NXP --omf_browse=.\obj\system_lpc17xx.crf system_LPC17xx.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;430     *----------------------------------------------------------------------------*/
;;;431    void SystemCoreClockUpdate (void)            /* Get Core Clock Frequency      */
000000  4891              LDR      r0,|L1.584|
;;;432    {
;;;433      /* Determine clock frequency according to clock register values             */
;;;434      if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { /* If PLL0 enabled and connected */
000002  6800              LDR      r0,[r0,#0]
000004  f3c06001          UBFX     r0,r0,#24,#2
000008  2803              CMP      r0,#3
00000a  d168              BNE      |L1.222|
;;;435        switch (LPC_SC->CLKSRCSEL & 0x03) {
00000c  488f              LDR      r0,|L1.588|
00000e  6800              LDR      r0,[r0,#0]
000010  f0100003          ANDS     r0,r0,#3
000014  d006              BEQ      |L1.36|
000016  2801              CMP      r0,#1
000018  d023              BEQ      |L1.98|
00001a  2802              CMP      r0,#2
00001c  d03f              BEQ      |L1.158|
00001e  2803              CMP      r0,#3
000020  d15c              BNE      |L1.220|
000022  e000              B        |L1.38|
                  |L1.36|
;;;436          case 0:                                /* Int. RC oscillator => PLL0    */
;;;437          case 3:                                /* Reserved, default to Int. RC  */
000024  bf00              NOP      
                  |L1.38|
;;;438            SystemCoreClock = (IRC_OSC * 
000026  4888              LDR      r0,|L1.584|
000028  6800              LDR      r0,[r0,#0]
00002a  f3c0000e          UBFX     r0,r0,#0,#15
00002e  f1000001          ADD      r0,r0,#1
000032  ea4f0040          LSL      r0,r0,#1
000036  4986              LDR      r1,|L1.592|
000038  fb00f001          MUL      r0,r0,r1
00003c  4985              LDR      r1,|L1.596|
00003e  f8d11088          LDR      r1,[r1,#0x88]
000042  f3c14107          UBFX     r1,r1,#16,#8
000046  f1010101          ADD      r1,r1,#1
00004a  fbb0f1f1          UDIV     r1,r0,r1
00004e  4882              LDR      r0,|L1.600|
000050  6800              LDR      r0,[r0,#0]
000052  b2c0              UXTB     r0,r0
000054  f1000001          ADD      r0,r0,#1
000058  fbb1f0f0          UDIV     r0,r1,r0
00005c  497f              LDR      r1,|L1.604|
00005e  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;439                              ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
;;;440                              (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
;;;441                              ((LPC_SC->CCLKCFG & 0xFF)+ 1));
;;;442            break;
000060  e03c              B        |L1.220|
                  |L1.98|
;;;443          case 1:                                /* Main oscillator => PLL0       */
;;;444            SystemCoreClock = (OSC_CLK * 
000062  4879              LDR      r0,|L1.584|
000064  6800              LDR      r0,[r0,#0]
000066  f3c0000e          UBFX     r0,r0,#0,#15
00006a  f1000001          ADD      r0,r0,#1
00006e  ea4f0040          LSL      r0,r0,#1
000072  497b              LDR      r1,|L1.608|
000074  fb00f001          MUL      r0,r0,r1
000078  4976              LDR      r1,|L1.596|
00007a  f8d11088          LDR      r1,[r1,#0x88]
00007e  f3c14107          UBFX     r1,r1,#16,#8
000082  f1010101          ADD      r1,r1,#1
000086  fbb0f1f1          UDIV     r1,r0,r1
00008a  4873              LDR      r0,|L1.600|
00008c  6800              LDR      r0,[r0,#0]
00008e  b2c0              UXTB     r0,r0
000090  f1000001          ADD      r0,r0,#1
000094  fbb1f0f0          UDIV     r0,r1,r0
000098  4970              LDR      r1,|L1.604|
00009a  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;445                              ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
;;;446                              (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
;;;447                              ((LPC_SC->CCLKCFG & 0xFF)+ 1));
;;;448            break;
00009c  e01e              B        |L1.220|
                  |L1.158|
;;;449          case 2:                                /* RTC oscillator => PLL0        */
;;;450            SystemCoreClock = (RTC_CLK * 
00009e  486a              LDR      r0,|L1.584|
0000a0  6800              LDR      r0,[r0,#0]
0000a2  f3c0000e          UBFX     r0,r0,#0,#15
0000a6  f1000001          ADD      r0,r0,#1
0000aa  ea4f0040          LSL      r0,r0,#1
0000ae  f44f41fa          MOV      r1,#0x7d00
0000b2  fb00f001          MUL      r0,r0,r1
0000b6  4967              LDR      r1,|L1.596|
0000b8  f8d11088          LDR      r1,[r1,#0x88]
0000bc  f3c14107          UBFX     r1,r1,#16,#8
0000c0  f1010101          ADD      r1,r1,#1
0000c4  fbb0f1f1          UDIV     r1,r0,r1
0000c8  4863              LDR      r0,|L1.600|
0000ca  6800              LDR      r0,[r0,#0]
0000cc  b2c0              UXTB     r0,r0
0000ce  f1000001          ADD      r0,r0,#1
0000d2  fbb1f0f0          UDIV     r0,r1,r0
0000d6  4961              LDR      r1,|L1.604|
0000d8  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;451                              ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
;;;452                              (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
;;;453                              ((LPC_SC->CCLKCFG & 0xFF)+ 1));
;;;454            break;
0000da  bf00              NOP      
                  |L1.220|
0000dc  e02f              B        |L1.318|
                  |L1.222|
;;;455        }
;;;456      } else {
;;;457        switch (LPC_SC->CLKSRCSEL & 0x03) {
0000de  485b              LDR      r0,|L1.588|
0000e0  6800              LDR      r0,[r0,#0]
0000e2  f0100003          ANDS     r0,r0,#3
0000e6  d006              BEQ      |L1.246|
0000e8  2801              CMP      r0,#1
0000ea  d010              BEQ      |L1.270|
0000ec  2802              CMP      r0,#2
0000ee  d019              BEQ      |L1.292|
0000f0  2803              CMP      r0,#3
0000f2  d123              BNE      |L1.316|
0000f4  e000              B        |L1.248|
                  |L1.246|
;;;458          case 0:                                /* Int. RC oscillator => PLL0    */
;;;459          case 3:                                /* Reserved, default to Int. RC  */
0000f6  bf00              NOP      
                  |L1.248|
;;;460            SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
0000f8  4857              LDR      r0,|L1.600|
0000fa  6800              LDR      r0,[r0,#0]
0000fc  b2c0              UXTB     r0,r0
0000fe  f1000001          ADD      r0,r0,#1
000102  4953              LDR      r1,|L1.592|
000104  fbb1f0f0          UDIV     r0,r1,r0
000108  4954              LDR      r1,|L1.604|
00010a  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;461            break;
00010c  e016              B        |L1.316|
                  |L1.270|
;;;462          case 1:                                /* Main oscillator => PLL0       */
;;;463            SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
00010e  4852              LDR      r0,|L1.600|
000110  6800              LDR      r0,[r0,#0]
000112  b2c0              UXTB     r0,r0
000114  f1000001          ADD      r0,r0,#1
000118  4951              LDR      r1,|L1.608|
00011a  fbb1f0f0          UDIV     r0,r1,r0
00011e  494f              LDR      r1,|L1.604|
000120  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;464            break;
000122  e00b              B        |L1.316|
                  |L1.292|
;;;465          case 2:                                /* RTC oscillator => PLL0        */
;;;466            SystemCoreClock = RTC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
000124  484c              LDR      r0,|L1.600|
000126  6800              LDR      r0,[r0,#0]
000128  b2c0              UXTB     r0,r0
00012a  f1000001          ADD      r0,r0,#1
00012e  f44f41fa          MOV      r1,#0x7d00
000132  fbb1f0f0          UDIV     r0,r1,r0
000136  4949              LDR      r1,|L1.604|
000138  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;467            break;
00013a  bf00              NOP      
                  |L1.316|
00013c  bf00              NOP                            ;461
                  |L1.318|
;;;468        }
;;;469      }
;;;470    
;;;471    }
00013e  4770              BX       lr
;;;472    
                          ENDP

                  SystemInit PROC
;;;481     */
;;;482    void SystemInit (void)
000140  2020              MOVS     r0,#0x20
;;;483    {
;;;484    #if (CLOCK_SETUP)                       /* Clock Setup                        */
;;;485      LPC_SC->SCS       = SCS_Val;
000142  4948              LDR      r1,|L1.612|
000144  6008              STR      r0,[r1,#0]
;;;486      if (SCS_Val & (1 << 5)) {             /* If Main Oscillator is enabled      */
;;;487        while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
000146  bf00              NOP      
                  |L1.328|
000148  4846              LDR      r0,|L1.612|
00014a  6800              LDR      r0,[r0,#0]
00014c  f0100f40          TST      r0,#0x40
000150  d0fa              BEQ      |L1.328|
;;;488      }
;;;489    
;;;490      LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */
000152  2003              MOVS     r0,#3
000154  4940              LDR      r1,|L1.600|
000156  6008              STR      r0,[r1,#0]
;;;491    
;;;492    #if (PLL0_SETUP)
;;;493      LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */
000158  f04f0001          MOV      r0,#1
00015c  493d              LDR      r1,|L1.596|
00015e  f8c1010c          STR      r0,[r1,#0x10c]
;;;494    
;;;495      LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
000162  4841              LDR      r0,|L1.616|
000164  4941              LDR      r1,|L1.620|
000166  6008              STR      r0,[r1,#0]
;;;496      LPC_SC->PLL0FEED  = 0xAA;
000168  f04f00aa          MOV      r0,#0xaa
00016c  4940              LDR      r1,|L1.624|
00016e  6008              STR      r0,[r1,#0]
;;;497      LPC_SC->PLL0FEED  = 0x55;
000170  f04f0055          MOV      r0,#0x55
000174  6008              STR      r0,[r1,#0]
;;;498    
;;;499      LPC_SC->PLL0CON   = 0x01;             /* PLL0 Enable                        */
000176  f04f0001          MOV      r0,#1
00017a  493e              LDR      r1,|L1.628|
00017c  6008              STR      r0,[r1,#0]
;;;500      LPC_SC->PLL0FEED  = 0xAA;
00017e  f04f00aa          MOV      r0,#0xaa
000182  493b              LDR      r1,|L1.624|
000184  6008              STR      r0,[r1,#0]
;;;501      LPC_SC->PLL0FEED  = 0x55;
000186  f04f0055          MOV      r0,#0x55
00018a  4932              LDR      r1,|L1.596|
00018c  f8c1008c          STR      r0,[r1,#0x8c]
;;;502      while (!(LPC_SC->PLL0STAT & (1<<26)));/* Wait for PLOCK0                    */
000190  bf00              NOP      
                  |L1.402|
000192  482d              LDR      r0,|L1.584|
000194  6800              LDR      r0,[r0,#0]
000196  f0106f80          TST      r0,#0x4000000
00019a  d0fa              BEQ      |L1.402|
;;;503    
;;;504      LPC_SC->PLL0CON   = 0x03;             /* PLL0 Enable & Connect              */
00019c  2003              MOVS     r0,#3
00019e  4935              LDR      r1,|L1.628|
0001a0  6008              STR      r0,[r1,#0]
;;;505      LPC_SC->PLL0FEED  = 0xAA;
0001a2  f04f00aa          MOV      r0,#0xaa
0001a6  492b              LDR      r1,|L1.596|
0001a8  f8c1008c          STR      r0,[r1,#0x8c]
;;;506      LPC_SC->PLL0FEED  = 0x55;
0001ac  f04f0055          MOV      r0,#0x55
0001b0  492f              LDR      r1,|L1.624|
0001b2  6008              STR      r0,[r1,#0]
;;;507      while (!(LPC_SC->PLL0STAT & ((1<<25) | (1<<24))));/* Wait for PLLC0_STAT & PLLE0_STAT */
0001b4  bf00              NOP      
                  |L1.438|
0001b6  4824              LDR      r0,|L1.584|
0001b8  6800              LDR      r0,[r0,#0]
0001ba  f0107f40          TST      r0,#0x3000000
0001be  d0fa              BEQ      |L1.438|
;;;508    #endif
;;;509    
;;;510    #if (PLL1_SETUP)
;;;511      LPC_SC->PLL1CFG   = PLL1CFG_Val;
0001c0  2023              MOVS     r0,#0x23
0001c2  492d              LDR      r1,|L1.632|
0001c4  6008              STR      r0,[r1,#0]
;;;512      LPC_SC->PLL1FEED  = 0xAA;
0001c6  f04f00aa          MOV      r0,#0xaa
0001ca  4922              LDR      r1,|L1.596|
0001cc  f8c100ac          STR      r0,[r1,#0xac]
;;;513      LPC_SC->PLL1FEED  = 0x55;
0001d0  f04f0055          MOV      r0,#0x55
0001d4  4929              LDR      r1,|L1.636|
0001d6  6008              STR      r0,[r1,#0]
;;;514    
;;;515      LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
0001d8  f04f0001          MOV      r0,#1
0001dc  4928              LDR      r1,|L1.640|
0001de  6008              STR      r0,[r1,#0]
;;;516      LPC_SC->PLL1FEED  = 0xAA;
0001e0  f04f00aa          MOV      r0,#0xaa
0001e4  4925              LDR      r1,|L1.636|
0001e6  6008              STR      r0,[r1,#0]
;;;517      LPC_SC->PLL1FEED  = 0x55;
0001e8  f04f0055          MOV      r0,#0x55
0001ec  4919              LDR      r1,|L1.596|
0001ee  f8c100ac          STR      r0,[r1,#0xac]
;;;518      while (!(LPC_SC->PLL1STAT & (1<<10)));/* Wait for PLOCK1                    */
0001f2  bf00              NOP      
                  |L1.500|
0001f4  4823              LDR      r0,|L1.644|
0001f6  6800              LDR      r0,[r0,#0]
0001f8  f4106f80          TST      r0,#0x400
0001fc  d0fa              BEQ      |L1.500|
;;;519    
;;;520      LPC_SC->PLL1CON   = 0x03;             /* PLL1 Enable & Connect              */
0001fe  2003              MOVS     r0,#3
000200  491f              LDR      r1,|L1.640|
000202  6008              STR      r0,[r1,#0]
;;;521      LPC_SC->PLL1FEED  = 0xAA;
000204  f04f00aa          MOV      r0,#0xaa
000208  4912              LDR      r1,|L1.596|
00020a  f8c100ac          STR      r0,[r1,#0xac]
;;;522      LPC_SC->PLL1FEED  = 0x55;
00020e  f04f0055          MOV      r0,#0x55
000212  491a              LDR      r1,|L1.636|
000214  6008              STR      r0,[r1,#0]
;;;523      while (!(LPC_SC->PLL1STAT & ((1<< 9) | (1<< 8))));/* Wait for PLLC1_STAT & PLLE1_STAT */
000216  bf00              NOP      
                  |L1.536|
000218  481a              LDR      r0,|L1.644|
00021a  6800              LDR      r0,[r0,#0]
00021c  f4107f40          TST      r0,#0x300
000220  d0fa              BEQ      |L1.536|
;;;524    #else
;;;525      LPC_SC->USBCLKCFG = USBCLKCFG_Val;    /* Setup USB Clock Divider            */
;;;526    #endif
;;;527    
;;;528      LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
000222  2000              MOVS     r0,#0
000224  4918              LDR      r1,|L1.648|
000226  6008              STR      r0,[r1,#0]
;;;529      LPC_SC->PCLKSEL1  = PCLKSEL1_Val;
000228  490a              LDR      r1,|L1.596|
00022a  f8c101ac          STR      r0,[r1,#0x1ac]
;;;530    
;;;531      LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */
00022e  4817              LDR      r0,|L1.652|
000230  4917              LDR      r1,|L1.656|
000232  6008              STR      r0,[r1,#0]
;;;532    
;;;533      LPC_SC->CLKOUTCFG = CLKOUTCFG_Val;    /* Clock Output Configuration         */
000234  f04f0000          MOV      r0,#0
000238  4916              LDR      r1,|L1.660|
00023a  6008              STR      r0,[r1,#0]
;;;534    #endif
;;;535    
;;;536    #if (FLASH_SETUP == 1)                  /* Flash Accelerator Setup            */
;;;537      LPC_SC->FLASHCFG  = FLASHCFG_Val;
00023c  f243003a          MOV      r0,#0x303a
000240  4904              LDR      r1,|L1.596|
000242  6008              STR      r0,[r1,#0]
;;;538    #endif
;;;539    }
000244  4770              BX       lr
                          ENDP

000246  0000              DCW      0x0000
                  |L1.584|
                          DCD      0x400fc088
                  |L1.588|
                          DCD      0x400fc10c
                  |L1.592|
                          DCD      0x003d0900
                  |L1.596|
                          DCD      0x400fc000
                  |L1.600|
                          DCD      0x400fc104
                  |L1.604|
                          DCD      SystemCoreClock
                  |L1.608|
                          DCD      0x00b71b00
                  |L1.612|
                          DCD      0x400fc1a0
                  |L1.616|
                          DCD      0x00050063
                  |L1.620|
                          DCD      0x400fc084
                  |L1.624|
                          DCD      0x400fc08c
                  |L1.628|
                          DCD      0x400fc080
                  |L1.632|
                          DCD      0x400fc0a4
                  |L1.636|
                          DCD      0x400fc0ac
                  |L1.640|
                          DCD      0x400fc0a0
                  |L1.644|
                          DCD      0x400fc0a8
                  |L1.648|
                          DCD      0x400fc1a8
                  |L1.652|
                          DCD      0x042887de
                  |L1.656|
                          DCD      0x400fc0c4
                  |L1.660|
                          DCD      0x400fc1c8

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x05f5e100
